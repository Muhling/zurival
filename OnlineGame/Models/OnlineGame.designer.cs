#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnlineGame")]
	public partial class OnlineGameDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertMap(Map instance);
    partial void UpdateMap(Map instance);
    partial void DeleteMap(Map instance);
    partial void InsertMapTileBlock(MapTileBlock instance);
    partial void UpdateMapTileBlock(MapTileBlock instance);
    partial void DeleteMapTileBlock(MapTileBlock instance);
    partial void InsertMapTileBlockType(MapTileBlockType instance);
    partial void UpdateMapTileBlockType(MapTileBlockType instance);
    partial void DeleteMapTileBlockType(MapTileBlockType instance);
    partial void InsertMapTile(MapTile instance);
    partial void UpdateMapTile(MapTile instance);
    partial void DeleteMapTile(MapTile instance);
    partial void InsertMapTileType(MapTileType instance);
    partial void UpdateMapTileType(MapTileType instance);
    partial void DeleteMapTileType(MapTileType instance);
    #endregion
		
		public OnlineGameDataContext() : 
				base(global::Models.Properties.Settings.Default.OnlineGameConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineGameDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineGameDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineGameDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineGameDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Map> Maps
		{
			get
			{
				return this.GetTable<Map>();
			}
		}
		
		public System.Data.Linq.Table<MapTileBlock> MapTileBlocks
		{
			get
			{
				return this.GetTable<MapTileBlock>();
			}
		}
		
		public System.Data.Linq.Table<MapTileBlockType> MapTileBlockTypes
		{
			get
			{
				return this.GetTable<MapTileBlockType>();
			}
		}
		
		public System.Data.Linq.Table<MapTile> MapTiles
		{
			get
			{
				return this.GetTable<MapTile>();
			}
		}
		
		public System.Data.Linq.Table<MapTileType> MapTileTypes
		{
			get
			{
				return this.GetTable<MapTileType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Password;
		
		private string _Email;
		
		private bool _Verified;
		
		private string _Salt;
		
		private System.DateTime _Created;
		
		private int _RoleId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnVerifiedChanging(bool value);
    partial void OnVerifiedChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verified", DbType="Bit NOT NULL")]
		public bool Verified
		{
			get
			{
				return this._Verified;
			}
			set
			{
				if ((this._Verified != value))
				{
					this.OnVerifiedChanging(value);
					this.SendPropertyChanging();
					this._Verified = value;
					this.SendPropertyChanged("Verified");
					this.OnVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Maps")]
	public partial class Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Created;
		
		private int _NrOfBlocks;
		
		private EntitySet<MapTileBlock> _MapTileBlocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnNrOfBlocksChanging(int value);
    partial void OnNrOfBlocksChanged();
    #endregion
		
		public Map()
		{
			this._MapTileBlocks = new EntitySet<MapTileBlock>(new Action<MapTileBlock>(this.attach_MapTileBlocks), new Action<MapTileBlock>(this.detach_MapTileBlocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NrOfBlocks", DbType="Int NOT NULL")]
		public int NrOfBlocks
		{
			get
			{
				return this._NrOfBlocks;
			}
			set
			{
				if ((this._NrOfBlocks != value))
				{
					this.OnNrOfBlocksChanging(value);
					this.SendPropertyChanging();
					this._NrOfBlocks = value;
					this.SendPropertyChanged("NrOfBlocks");
					this.OnNrOfBlocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_MapTileBlock", Storage="_MapTileBlocks", ThisKey="Id", OtherKey="MapId")]
		public EntitySet<MapTileBlock> MapTileBlocks
		{
			get
			{
				return this._MapTileBlocks;
			}
			set
			{
				this._MapTileBlocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapTileBlocks(MapTileBlock entity)
		{
			this.SendPropertyChanging();
			entity.Map = this;
		}
		
		private void detach_MapTileBlocks(MapTileBlock entity)
		{
			this.SendPropertyChanging();
			entity.Map = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapTileBlocks")]
	public partial class MapTileBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TypeId;
		
		private int _PositionIndex;
		
		private int _MapId;
		
		private EntitySet<MapTile> _MapTiles;
		
		private EntityRef<Map> _Map;
		
		private EntityRef<MapTileBlockType> _MapTileBlockType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnPositionIndexChanging(int value);
    partial void OnPositionIndexChanged();
    partial void OnMapIdChanging(int value);
    partial void OnMapIdChanged();
    #endregion
		
		public MapTileBlock()
		{
			this._MapTiles = new EntitySet<MapTile>(new Action<MapTile>(this.attach_MapTiles), new Action<MapTile>(this.detach_MapTiles));
			this._Map = default(EntityRef<Map>);
			this._MapTileBlockType = default(EntityRef<MapTileBlockType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._MapTileBlockType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionIndex", DbType="Int NOT NULL")]
		public int PositionIndex
		{
			get
			{
				return this._PositionIndex;
			}
			set
			{
				if ((this._PositionIndex != value))
				{
					this.OnPositionIndexChanging(value);
					this.SendPropertyChanging();
					this._PositionIndex = value;
					this.SendPropertyChanged("PositionIndex");
					this.OnPositionIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapId", DbType="Int NOT NULL")]
		public int MapId
		{
			get
			{
				return this._MapId;
			}
			set
			{
				if ((this._MapId != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapIdChanging(value);
					this.SendPropertyChanging();
					this._MapId = value;
					this.SendPropertyChanged("MapId");
					this.OnMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileBlock_MapTile", Storage="_MapTiles", ThisKey="Id", OtherKey="MapTileBlockId")]
		public EntitySet<MapTile> MapTiles
		{
			get
			{
				return this._MapTiles;
			}
			set
			{
				this._MapTiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_MapTileBlock", Storage="_Map", ThisKey="MapId", OtherKey="Id", IsForeignKey=true)]
		public Map Map
		{
			get
			{
				return this._Map.Entity;
			}
			set
			{
				Map previousValue = this._Map.Entity;
				if (((previousValue != value) 
							|| (this._Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Map.Entity = null;
						previousValue.MapTileBlocks.Remove(this);
					}
					this._Map.Entity = value;
					if ((value != null))
					{
						value.MapTileBlocks.Add(this);
						this._MapId = value.Id;
					}
					else
					{
						this._MapId = default(int);
					}
					this.SendPropertyChanged("Map");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileBlockType_MapTileBlock", Storage="_MapTileBlockType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public MapTileBlockType MapTileBlockType
		{
			get
			{
				return this._MapTileBlockType.Entity;
			}
			set
			{
				MapTileBlockType previousValue = this._MapTileBlockType.Entity;
				if (((previousValue != value) 
							|| (this._MapTileBlockType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapTileBlockType.Entity = null;
						previousValue.MapTileBlocks.Remove(this);
					}
					this._MapTileBlockType.Entity = value;
					if ((value != null))
					{
						value.MapTileBlocks.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("MapTileBlockType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapTiles(MapTile entity)
		{
			this.SendPropertyChanging();
			entity.MapTileBlock = this;
		}
		
		private void detach_MapTiles(MapTile entity)
		{
			this.SendPropertyChanging();
			entity.MapTileBlock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapTileBlockTypes")]
	public partial class MapTileBlockType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<MapTileBlock> _MapTileBlocks;
		
		private EntitySet<MapTileType> _MapTileTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MapTileBlockType()
		{
			this._MapTileBlocks = new EntitySet<MapTileBlock>(new Action<MapTileBlock>(this.attach_MapTileBlocks), new Action<MapTileBlock>(this.detach_MapTileBlocks));
			this._MapTileTypes = new EntitySet<MapTileType>(new Action<MapTileType>(this.attach_MapTileTypes), new Action<MapTileType>(this.detach_MapTileTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileBlockType_MapTileBlock", Storage="_MapTileBlocks", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<MapTileBlock> MapTileBlocks
		{
			get
			{
				return this._MapTileBlocks;
			}
			set
			{
				this._MapTileBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileBlockType_MapTileType", Storage="_MapTileTypes", ThisKey="Id", OtherKey="BlockTypeId")]
		public EntitySet<MapTileType> MapTileTypes
		{
			get
			{
				return this._MapTileTypes;
			}
			set
			{
				this._MapTileTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapTileBlocks(MapTileBlock entity)
		{
			this.SendPropertyChanging();
			entity.MapTileBlockType = this;
		}
		
		private void detach_MapTileBlocks(MapTileBlock entity)
		{
			this.SendPropertyChanging();
			entity.MapTileBlockType = null;
		}
		
		private void attach_MapTileTypes(MapTileType entity)
		{
			this.SendPropertyChanging();
			entity.MapTileBlockType = this;
		}
		
		private void detach_MapTileTypes(MapTileType entity)
		{
			this.SendPropertyChanging();
			entity.MapTileBlockType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapTiles")]
	public partial class MapTile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _X;
		
		private int _Y;
		
		private int _TypeId;
		
		private int _Width;
		
		private int _Height;
		
		private int _MapTileBlockId;
		
		private EntityRef<MapTileBlock> _MapTileBlock;
		
		private EntityRef<MapTileType> _MapTileType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnXChanging(int value);
    partial void OnXChanged();
    partial void OnYChanging(int value);
    partial void OnYChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnMapTileBlockIdChanging(int value);
    partial void OnMapTileBlockIdChanged();
    #endregion
		
		public MapTile()
		{
			this._MapTileBlock = default(EntityRef<MapTileBlock>);
			this._MapTileType = default(EntityRef<MapTileType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Int NOT NULL")]
		public int X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Int NOT NULL")]
		public int Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._MapTileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTileBlockId", DbType="Int NOT NULL")]
		public int MapTileBlockId
		{
			get
			{
				return this._MapTileBlockId;
			}
			set
			{
				if ((this._MapTileBlockId != value))
				{
					if (this._MapTileBlock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTileBlockIdChanging(value);
					this.SendPropertyChanging();
					this._MapTileBlockId = value;
					this.SendPropertyChanged("MapTileBlockId");
					this.OnMapTileBlockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileBlock_MapTile", Storage="_MapTileBlock", ThisKey="MapTileBlockId", OtherKey="Id", IsForeignKey=true)]
		public MapTileBlock MapTileBlock
		{
			get
			{
				return this._MapTileBlock.Entity;
			}
			set
			{
				MapTileBlock previousValue = this._MapTileBlock.Entity;
				if (((previousValue != value) 
							|| (this._MapTileBlock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapTileBlock.Entity = null;
						previousValue.MapTiles.Remove(this);
					}
					this._MapTileBlock.Entity = value;
					if ((value != null))
					{
						value.MapTiles.Add(this);
						this._MapTileBlockId = value.Id;
					}
					else
					{
						this._MapTileBlockId = default(int);
					}
					this.SendPropertyChanged("MapTileBlock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileType_MapTile", Storage="_MapTileType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public MapTileType MapTileType
		{
			get
			{
				return this._MapTileType.Entity;
			}
			set
			{
				MapTileType previousValue = this._MapTileType.Entity;
				if (((previousValue != value) 
							|| (this._MapTileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapTileType.Entity = null;
						previousValue.MapTiles.Remove(this);
					}
					this._MapTileType.Entity = value;
					if ((value != null))
					{
						value.MapTiles.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("MapTileType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapTileTypes")]
	public partial class MapTileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _MovementAllowed;
		
		private string _Background;
		
		private int _BlockTypeId;
		
		private EntitySet<MapTile> _MapTiles;
		
		private EntityRef<MapTileBlockType> _MapTileBlockType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMovementAllowedChanging(bool value);
    partial void OnMovementAllowedChanged();
    partial void OnBackgroundChanging(string value);
    partial void OnBackgroundChanged();
    partial void OnBlockTypeIdChanging(int value);
    partial void OnBlockTypeIdChanged();
    #endregion
		
		public MapTileType()
		{
			this._MapTiles = new EntitySet<MapTile>(new Action<MapTile>(this.attach_MapTiles), new Action<MapTile>(this.detach_MapTiles));
			this._MapTileBlockType = default(EntityRef<MapTileBlockType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovementAllowed", DbType="Bit NOT NULL")]
		public bool MovementAllowed
		{
			get
			{
				return this._MovementAllowed;
			}
			set
			{
				if ((this._MovementAllowed != value))
				{
					this.OnMovementAllowedChanging(value);
					this.SendPropertyChanging();
					this._MovementAllowed = value;
					this.SendPropertyChanged("MovementAllowed");
					this.OnMovementAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Background", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Background
		{
			get
			{
				return this._Background;
			}
			set
			{
				if ((this._Background != value))
				{
					this.OnBackgroundChanging(value);
					this.SendPropertyChanging();
					this._Background = value;
					this.SendPropertyChanged("Background");
					this.OnBackgroundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockTypeId", DbType="Int NOT NULL")]
		public int BlockTypeId
		{
			get
			{
				return this._BlockTypeId;
			}
			set
			{
				if ((this._BlockTypeId != value))
				{
					if (this._MapTileBlockType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlockTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BlockTypeId = value;
					this.SendPropertyChanged("BlockTypeId");
					this.OnBlockTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileType_MapTile", Storage="_MapTiles", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<MapTile> MapTiles
		{
			get
			{
				return this._MapTiles;
			}
			set
			{
				this._MapTiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapTileBlockType_MapTileType", Storage="_MapTileBlockType", ThisKey="BlockTypeId", OtherKey="Id", IsForeignKey=true)]
		public MapTileBlockType MapTileBlockType
		{
			get
			{
				return this._MapTileBlockType.Entity;
			}
			set
			{
				MapTileBlockType previousValue = this._MapTileBlockType.Entity;
				if (((previousValue != value) 
							|| (this._MapTileBlockType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapTileBlockType.Entity = null;
						previousValue.MapTileTypes.Remove(this);
					}
					this._MapTileBlockType.Entity = value;
					if ((value != null))
					{
						value.MapTileTypes.Add(this);
						this._BlockTypeId = value.Id;
					}
					else
					{
						this._BlockTypeId = default(int);
					}
					this.SendPropertyChanged("MapTileBlockType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapTiles(MapTile entity)
		{
			this.SendPropertyChanging();
			entity.MapTileType = this;
		}
		
		private void detach_MapTiles(MapTile entity)
		{
			this.SendPropertyChanging();
			entity.MapTileType = null;
		}
	}
}
#pragma warning restore 1591
